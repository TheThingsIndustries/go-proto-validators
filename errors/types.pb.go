// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package errors

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Types defines the error types for the supported validation checks.
// If validation criteria are added/removed from "validator.proto", make sure that this is updated.
// Please keep this list sorted alphabetically.
type Types int32

const (
	// Floating value Field describing the epsilon within which any comparison should be considered to be true.
	Types_FLOAT_ELIPSON Types = 0
	// Floating value Field must be strictly greater than the specified value.
	Types_FLOAT_GT Types = 1
	// Floating value Field must be greater than or equal to the specified value.
	Types_FLOAT_GTE Types = 2
	// Floating value Field must be strictly lesser than the specified value.
	Types_FLOAT_LT Types = 3
	// Floating value Field must be lesser than or equal to the specified value.
	Types_FLOAT_LTE Types = 4
	// Field has an accompanying user specified error.
	Types_HUMAN_ERROR Types = 5
	// Integer Field must be strictly greater than the specified value.
	Types_INT_GT Types = 6
	// Integer Field must be strictly lesser than the specified value.
	Types_INT_LT Types = 7
	// Field (string/byte slice) must have a length equal to the specified value.
	Types_LENGTH_EQ Types = 8
	// Field (string/byte slice) must have a length greater than the specified value.
	Types_LENGTH_GT Types = 9
	// Field (string/byte slice) must have a length lesser than the specified value.
	Types_LENGTH_LT Types = 10
	// Message Field must exist.
	Types_MSG_EXISTS Types = 11
	// Repeated Field must at the most the specified number elements.
	Types_REPEATED_COUNT_MAX Types = 12
	// Repeated Field must at least the specified number elements.
	Types_REPEATED_COUNT_MIN Types = 13
	// String Field must not be empty.
	Types_STRING_NOT_EMPTY Types = 14
	// String Field must pass the regex check.
	Types_STRING_REGEX Types = 15
)

var Types_name = map[int32]string{
	0:  "FLOAT_ELIPSON",
	1:  "FLOAT_GT",
	2:  "FLOAT_GTE",
	3:  "FLOAT_LT",
	4:  "FLOAT_LTE",
	5:  "HUMAN_ERROR",
	6:  "INT_GT",
	7:  "INT_LT",
	8:  "LENGTH_EQ",
	9:  "LENGTH_GT",
	10: "LENGTH_LT",
	11: "MSG_EXISTS",
	12: "REPEATED_COUNT_MAX",
	13: "REPEATED_COUNT_MIN",
	14: "STRING_NOT_EMPTY",
	15: "STRING_REGEX",
}

var Types_value = map[string]int32{
	"FLOAT_ELIPSON":      0,
	"FLOAT_GT":           1,
	"FLOAT_GTE":          2,
	"FLOAT_LT":           3,
	"FLOAT_LTE":          4,
	"HUMAN_ERROR":        5,
	"INT_GT":             6,
	"INT_LT":             7,
	"LENGTH_EQ":          8,
	"LENGTH_GT":          9,
	"LENGTH_LT":          10,
	"MSG_EXISTS":         11,
	"REPEATED_COUNT_MAX": 12,
	"REPEATED_COUNT_MIN": 13,
	"STRING_NOT_EMPTY":   14,
	"STRING_REGEX":       15,
}

func (x Types) String() string {
	return proto.EnumName(Types_name, int32(x))
}

func (Types) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

func init() {
	proto.RegisterEnum("errors.Types", Types_name, Types_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4e, 0xf3, 0x40,
	0x10, 0x46, 0xff, 0x3f, 0x10, 0x93, 0x8c, 0xed, 0xe4, 0x63, 0x84, 0x38, 0x04, 0x05, 0x0d, 0x27,
	0xb0, 0x60, 0xd8, 0xac, 0xb4, 0xde, 0x35, 0xbb, 0x13, 0xc9, 0x54, 0x2b, 0x21, 0xa5, 0x76, 0xe4,
	0xa4, 0xe1, 0x1a, 0x9c, 0x18, 0x25, 0x10, 0x25, 0x05, 0xdd, 0xbc, 0xf7, 0x34, 0x53, 0x0c, 0x95,
	0xfb, 0xcf, 0xed, 0x66, 0xf7, 0xb8, 0x1d, 0x87, 0xfd, 0xc0, 0xc5, 0x66, 0x1c, 0x87, 0x71, 0xf7,
	0xf0, 0x35, 0xa1, 0xa9, 0x1e, 0x3c, 0xdf, 0x52, 0xfd, 0xea, 0x42, 0xa3, 0x59, 0x9c, 0xed, 0x52,
	0xf0, 0xf8, 0xc7, 0x15, 0xcd, 0x7e, 0x94, 0x51, 0xfc, 0xe7, 0x9a, 0xe6, 0x27, 0x12, 0x4c, 0xce,
	0xd1, 0x29, 0xae, 0xce, 0xd1, 0xa9, 0xe0, 0x9a, 0x97, 0x54, 0xae, 0xd6, 0x6d, 0xe3, 0xb3, 0xc4,
	0x18, 0x22, 0xa6, 0x4c, 0x54, 0x58, 0x7f, 0x3c, 0x54, 0x9c, 0x66, 0xa7, 0xb8, 0x39, 0xec, 0x39,
	0xf1, 0x46, 0x57, 0x59, 0xde, 0x30, 0xbb, 0x40, 0xa3, 0x98, 0x5f, 0xa0, 0x53, 0x10, 0x2f, 0x88,
	0xda, 0x64, 0xb2, 0xf4, 0x36, 0x69, 0x42, 0xc9, 0xf7, 0xc4, 0x51, 0x3a, 0x69, 0x54, 0x5e, 0xf2,
	0x73, 0x58, 0x7b, 0xcd, 0x6d, 0xd3, 0xa3, 0xfa, 0xcb, 0x5b, 0x8f, 0x9a, 0xef, 0x08, 0x49, 0xa3,
	0xf5, 0x26, 0xfb, 0xa0, 0x59, 0xda, 0x4e, 0xdf, 0xb1, 0x60, 0x50, 0xf5, 0x6b, 0xa3, 0x18, 0xe9,
	0xb1, 0xfc, 0x28, 0x8e, 0x3f, 0x7a, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x13, 0xcb, 0x25, 0x9a,
	0x32, 0x01, 0x00, 0x00,
}
